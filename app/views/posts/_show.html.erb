<turbo-frame id="main-content">
<%= turbo_frame_tag "profile_edit_modal" %>
<%= turbo_frame_tag 'profile_modal' %>
<%= turbo_frame_tag 'post_edit_modal' %>
<%= turbo_frame_tag 'reply_modal' %>

  <div class="container min-h-screen max-w-[670px] mx-auto border-x">
    <div class="mt-2 flex flex mx-auto justify-between bg-white px-[16px] h-[53px]">
      <!-- 戻るボタン -->
      <%= render 'shared/back_button' %>
      <div class="flex justify-center items-center flex-grow">
        <p class="text-xl font-bold">ウェーブ</p>
      </div>
      <div class="invisible w-[56px] h-[53px]">ダミー</div>
    </div>
    <div class="grid grid-cols-1">
      <!-- 親投稿の一覧表示 -->
      <div class="bg-white">
        <% if @parent_posts.present? %>
          <% @parent_posts.each do |parent_post| %>
            <%= render 'posts/post', post: parent_post %>
          <% end %>
        <% end %>
      </div>

      <div class="bg-white">
        <% unless @parent_posts.include?(@post.parent_post) %>
          <% if @post.parent_post.present? %>
            <%= render 'posts/post', post: @post.parent_post %>
          <% elsif @post.post_reply_id.present? %>
            <div class="text-lg text-gray-500 mb-2">
              親の投稿が削除されました。
            </div>
          <% end %>
        <% end %>
        <%= render 'posts/post', post: @post %>
      </div>

      <!-- 送信先の表示 -->
      <div class="px-2 border border-gray-300">
        <div class="flex justify-center py-2">
          <button id="scroll-to-top" class="m-1 sm:m-2 text-sm btn-sm sm:text-md sm:btn-base btn btn-outline btn-secondary">
            <i class="fas fa-arrow-up pr-[2px]"></i>返信一覧の上へ
          </button>
          <button id="scroll-to-bottom" class="m-1 sm:m-2 text-sm btn-sm sm:text-md sm:btn-base btn btn-outline btn-accent">
            <i class="fas fa-arrow-down pr-[2px]"></i>返信一覧の下を表示
          </button>
        </div>
        <div id="replies" class="sm:pr-2 overflow-y-auto" style="max-height: calc(100vh - 300px)">
          <% if @replies.present? %>
            <%= turbo_frame_tag "next-page" do %>
              <% @replies.each do |reply| %>
                <% reply_notifications = (@notifications || []).select { |notification| notification.notifiable == reply } %>
                <%= render 'posts/post', post: reply, notifications: reply_notifications %>
              <% end %>
              <% if @pagy.next %>
                <%= render 'shared/next_page' %>
              <% end %>
            <% end %>
          <% end %>
        </div>
      </div>

      <% if logged_in? %>
        <%= render 'replies/form', post: @post, reply: @reply %>
      <% else %>
        <div class="text-center mb-2">
          <p class="mb-2 text-lg sm:text-lg">ここに返信フォームが<br class="sm:hidden">新規登録またはログイン後に表示されます。</p>
          <%= link_to t('header.signup'), new_signup_modal_path, class: 'text-lg btn btn-outline btn-accent btn-base sm:btn-lg rounded-full transition-colors duration-300 mx-1 sm:mx-4', data: { turbo_frame: "signup_modal" } %>
          <%= link_to t('header.login'), new_login_modal_path, class: 'text-lg btn btn-outline btn-primary btn-base sm:btn-lg rounded-full transition-colors duration-300 mx-1 sm:mx-4', data: { turbo_frame: "login_modal" } %>
        </div>
      <% end %>
    </div>
  </div>

<script>
  document.addEventListener('turbo:load', function() {
    const scrollToTopButton = document.getElementById('scroll-to-top');
    const scrollToBottomButton = document.getElementById('scroll-to-bottom');
    const repliesContainer = document.getElementById('replies');

    function scrollToTop() {
      repliesContainer.scrollTop = 0;
    }

    function scrollToBottom() {
      repliesContainer.scrollTop = repliesContainer.scrollHeight;
    }

    function checkScroll() {
      if (repliesContainer.scrollHeight > repliesContainer.clientHeight) {
        scrollToTopButton.style.display = 'block';
        scrollToBottomButton.style.display = 'block';
      } else {
        scrollToTopButton.style.display = 'none';
        scrollToBottomButton.style.display = 'none';
      }
    }

    if (scrollToTopButton && scrollToBottomButton && repliesContainer) {
      scrollToTopButton.addEventListener('click', scrollToTop);
      scrollToBottomButton.addEventListener('click', scrollToBottom);

      // ページロード時にスクロールをチェック
      checkScroll();

      // 新しい返信が追加されたときにスクロールをチェック
      const observer = new MutationObserver(function(mutationsList, observer) {
        for (let mutation of mutationsList) {
          if (mutation.type === 'childList') {
            checkScroll();
            if (scrollToBottomButton.style.display === 'block') {
              scrollToBottom();
            }
          }
        }
      });

      observer.observe(repliesContainer, { childList: true, subtree: true });
    }
  });
</script>
</turbo-frame>