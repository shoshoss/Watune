<%= turbo_frame_tag "post_modal" do %>
  <dialog id="post_modal_dialog" class="modal bg-gray-500 bg-opacity-50" data-controller="post-modal">
    <div class="modal-box p-2 max-h-screen">
      <div class="flex justify-end items-center">
        <button class="text-blue-500 hover:text-blue-700 font-semibold" data-action="click->post-modal#closeModal">閉じる</button>
      </div>

      <div class="mx-auto pt-2">
        <!-- 録音コントロール -->
        <section>
          <canvas class="visualizer w-full rounded-lg h-24 md:h-80" style="background-color: #05aaff;"></canvas>
        </section>

        <div class="flex justify-around items-center pt-2 px-5">
          <button class="record text-xl bg-blue-500 hover:bg-blue-700 text-white font-semibold py-2 px-5 md:px-10 rounded disabled:opacity-50" data-action="click->post-modal#startRecording">
            録音<br class="md:hidden">開始
          </button>
          <span class="timer text-gray-800 font-semibold text-3xl md:text-3xl lg:text-3xl">00:00</span>
          <button class="stop text-xl bg-red-500 hover:bg-red-700 text-white font-semibold py-2 px-5 md:px-10 rounded disabled:opacity-50" data-action="click->post-modal#stopRecording" disabled>
            録音<br class="md:hidden">完了
          </button>
        </div>

        <%= form_with model: @post, data: { controller: "post-modal", action: "turbo:submit-end->post-modal#afterClose" } do |f| %>
          <div class="card-body p-2">
            <%= render 'shared/error_messages', object: f.object %>

            <section class="sound-clips">
              <!-- 音声クリップはここに表示 -->
            </section>

            <div class="form-control pt-2">
              <%= f.label :body, '投稿内容', class: "block text-lg font-semibold", for: "body" %>
              <%= f.text_area :body, id: 'body', class: "block mt-1 p-2 text-base border-2 border-gray-300 rounded-lg focus:outline-none focus:ring focus:border-sky-500 resize-none overflow-y-auto", rows: "3", data: { action: "input->post-modal#checkForm", "post-modal-target" => "body" } %>
              <div class="text-sm text-gray-500 mt-1" data-post-modal-target="characterCount">0 / 500</div>
            </div>

            <div class="form-control pt-2">
              <%= f.label :fixed_category, 'カテゴリー', class: "block text-lg font-semibold", for: "fixed_category" %>
              <%= f.select :fixed_category, Post.fixed_categories_i18n.invert.map { |key, value| [key, value] }, { include_blank: false }, class: "block mt-1 p-2 text-base border-2 border-gray-300 rounded-lg" %>
            </div>

            <div class="form-control hidden" id="custom_category_input">
              <%= f.label :custom_category, 'カスタムカテゴリー', class: "hidden block text-lg font-semibold", for: "custom_category" %>
              <%= f.text_field :custom_category, id: 'custom_category', class: "block mt-1 p-2 text-base border-2 border-gray-300 rounded-lg", placeholder: "カテゴリーを入力" %>
            </div>

            <%= f.file_field :audio, direct_upload: true, class: "hidden" %>
            <%= f.hidden_field :duration, class: "duration-field" %>

            <!-- 送信先設定 -->
            <%= turbo_frame_tag "privacy-settings" do %>
              <div class="form-control pt-2">
                <label for="post_privacy" class="block text-lg font-semibold">送信先</label>
                <div class="flex space-x-4 pt-2">
                  <%= link_to '自分へ', new_post_path(privacy: 'only_me'), class: "btn-choice #{active_bottom('only_me')}", data: { turbo_frame: "privacy-settings" } %>
                  <%= link_to '仲間へ', new_post_path(privacy: 'selected_users', selected_user_ids: params[:selected_user_ids]), class: "btn-choice #{active_bottom('selected_users')}", data: { turbo_frame: "privacy-settings" } %>
                  <%= link_to 'みんなへ', new_post_path(privacy: 'open'), class: "btn-choice #{active_bottom('open')}", data: { turbo_frame: "privacy-settings" } %>
                </div>
                <input type="hidden" name="post[privacy]" id="post_privacy" value="<%= params[:privacy] || @post.privacy %>">
              </div>

              <% if params[:privacy] == 'selected_users' || @post.privacy == 'selected_users' %>
                <div class="form-control pt-2">
                  <%= f.label :recipient_ids, '仲間を選択', class: "block text-lg font-semibold" %>
                  <div class="flex flex-col max-h-48 overflow-y-auto border border-gray-300 rounded-lg p-2">
                    <% current_user.following_ordered_by_sent_posts.each do |following| %>
                      <label class="inline-flex items-center m-2">
                        <%= check_box_tag 'post[recipient_ids][]', following.id, params[:selected_user_ids]&.include?(following.id.to_s), class: 'form-checkbox h-5 w-5 text-blue-600' %>
                        <span class="ml-2 text-gray-700"><%= following.display_name %> (@<%= following.username_slug %>)</span>
                      </label>
                    <% end %>
                  </div>
                </div>
              <% end %>
            <% end %>
          </div>
          <div class="form-control mt-4 lg:mt-6">
            <%= f.submit t('helpers.submit.post'), class: "text-white font-bold rounded-full text-xl sm:text-2xl btn btn-info sm:btn-lg bg-opacity-80 opacity-50 cursor-not-allowed", disabled: true, data: { "post-modal-target" => "submitButton" } %>
          </div>
        <% end %>
      </div>

      <!-- モーダルを閉じるボタン -->
      <div class="modal-action my-4 flex justify-center">
        <button class="btn bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded" data-action="click->post-modal#closeModal">閉じる</button>
      </div>
    </div>
  </dialog>
<% end %>

<script>
  // テキストエリアの入力イベントに対する処理
  document.addEventListener('input', function(event) {
    // 入力イベントの対象がテキストエリアでない場合は処理しない
    if (event.target.tagName.toLowerCase() !== 'textarea') return;

    const textarea = event.target;
    const modalBox = document.querySelector('.modal-box');
    const maxModalHeight = window.innerHeight;

    // モーダル全体の高さが画面の高さを超えた場合の処理 (sm以上)
    if (window.innerWidth >= 640 && modalBox.scrollHeight >= maxModalHeight) {
      // テキストエリアの高さを固定し、スクロール可能にする
      textarea.classList.add('overflow-y-auto');
    } else if (window.innerWidth < 640 && textarea.scrollHeight >= 200) {
      // スマホの場合、テキストエリアの高さが200pxに達した場合
      textarea.classList.add('overflow-y-auto');
    } else {
      textarea.classList.remove('overflow-y-auto');
      // テキストエリアの高さを調整
      textarea.style.height = 'auto';
      textarea.style.height = textarea.scrollHeight + 'px';
      // モーダルの高さを調整
      modalBox.style.height = 'auto';
      modalBox.style.height = modalBox.scrollHeight + 'px';
    }

    // 投稿内容の文字数をカウントし、500文字を超えた場合は投稿ボタンを無効化
    const submitButton = document.querySelector('[data-post-modal-target="submitButton"]');
    const characterCount = document.querySelector('[data-post-modal-target="characterCount"]');
    const textLength = textarea.value.length;
    characterCount.textContent = `${textLength} / 500`;

    if (textLength > 500) {
      submitButton.disabled = true;
      submitButton.classList.add('opacity-50');
      submitButton.classList.add('cursor-not-allowed');
    } else {
      submitButton.disabled = false;
      submitButton.classList.remove('opacity-50');
      submitButton.classList.remove('cursor-not-allowed');
    }
  });

  // カテゴリー選択の変更イベントに対する処理
  document.addEventListener('change', function(event) {
    if (event.target.id === 'post_fixed_category') {
      const customCategoryInput = document.getElementById('custom_category_input');
      if (event.target.value === 'other') {
        customCategoryInput.classList.remove('hidden');
      } else {
        customCategoryInput.classList.add('hidden');
      }
    }
  });
</script>
